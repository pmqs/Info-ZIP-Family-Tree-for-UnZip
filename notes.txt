      VMS Notes for Info-ZIP Zip 3.0 and UnZip 6.0
      ============================================

   This document describes some VMS-specific behavior and implementation
details of the Info-ZIP Zip and Unzip programs.


   Command-line Case
   -----------------

   Zip and UnZip now include code which can preserve the case of
command-line parameters and options, which obviates quoting upper-case
options like "-V" or "-Z".  This works on non-VAX systems with a
sufficiently recent C RTL, and SET PROCESS /PARSE_STYLE = EXTENDED. 
(Sufficiently recent here means __CRTL_VER >= 70301000, which includes
VMS V7.3-1 with a C Run Time Library ECO, or V7.3-2 or newer.)

   This code uses the decc$feature_set_value() function to enable the 
DECC$ARGV_PARSE_STYLE feature.  There is a small range of C RTL versions
where this function is unavailable, but where manually setting the
logical name DECC$ARGV_PARSE_STYLE to "ENABLE" will work.

   HELP CRTL leads to some additional information on these features.


   File I/O Performance
   --------------------

   The Zip and UnZip file I/O code now includes open callback functions
which are used to try to set some RMS parameters to non-default values,
with the intention of improving file I/O speed.  This affects reading
the archive file in UnZip and writing it in Zip.  (Reading and writing
the individual data files is handled in more exotic ways, making these
parameters less important for them.)

   Currently, the built-in default parameters enable read-ahead and
write-behind, using a multi-buffer count of 2, and a multi-block count
of 127 (the maximum).  For writing the archive, the default extend
quantity is 16384 blocks (8MB), with truncation enabled.  This
combination is believed to be, at worst, fairly harmless for most
situations, and, in most cases, to provide a substantial speed
improvement, especially with large archives.

   This code allows SET RMS_DEFAULT parameters to override the built-in
default values.  On some old VMS versions, sys$getjpi() can not provide
the SET RMS_DEFAULT values, and in this situation, the callback function
will not try to use its improved parameter values.  Users on such old
VMS versions who seek improved I/O speed may wish to bypass this check,
which requires changing the code in the get_rms_defaults() function in
[.VMS]VMS.C.  The "-v" option on both programs enables diagnostic
messages which show the operation of the callback function.  A message
showing a failure status from sys$getjpi() indicates this problem.  (VMS
V5.5-2 is too old.  V7.3 is new enough.  Anyone with more precise
information is invited to contribute it.)

   Users who find other parameter sets more beneficial, or who find
particular problems with this set are welcome to comment.

   In this version, as in previous versions, when UnZip expands a -V
archive, it allocates the entire extent of a data file before writing
any of its data.  In previous versions, this could cause the destination
disk to be locked for a considerable time (minutes).  Now, the FAB
"sequential access only" flag (or equivalent) is set, which prevents
this troublesome disk locking.

   In previous versions, when UnZip expanded a non-V archive, it did no
pre-allocation, and used the default extension quantity.  This could
slow file creation significantly for large files.  Now, space for
extracted files is pre-allocated, and the same "sequential access only"
flag is set, as with a -V archive.

