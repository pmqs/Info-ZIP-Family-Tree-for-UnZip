
UNZIP

     UnZip lists, tests, or  extracts  files  from  a  ZIP  archive  (an
     archive  format  commonly  used  on  many  different systems).  The
     default behavior (with no options) is to extract into  the  current
     directory   (and  subdirectories  below  it)  all  files  from  the
     specified ZIP archive.   A  companion  program,  Zip,  creates  ZIP
     archives.

     Info-ZIP UnZip and Zip were intended to be compatible with archives
     created  by  PKWARE's  PKZIP  and  PKUNZIP programs (originally for
     MS-DOS), but in many cases the program options or default behaviors
     differ.   Nowadays,  many  other  programs are available which work
     with ZIP archives.

     This  help  file  describes  the  VMS  CLI  edition  of  UnZip.   A
     Unix-style  command-line edition is also available, with a separate
     help file.

     The VMS CLI edition of UnZip adds a command-line translator to  the
     normal   UnZip  program.   This  translator  transforms  a  set  of
     VMS-style qualifiers and  parameters  into  an  equivalent  set  of
     Unix-style   options   and   parameters,   and  then  passes  those
     transformed arguments to UnZip's standard  Unix-style  command-line
     processor.   The  documentation  often shows the related Unix-style
     options in parentheses after a VMS-style qualifier.   For  example:
     /HELP (-h, -hh).

     Format:

       UNZIP [/unzip_qualifiers] [file[.zip]] [member [,...]]

       UNZIP /ZIPINFO [/zipinfo_qualifiers] [file[.zip]] [member [,...]]

       ZIPINFO [/zipinfo_qualifiers] [file[.zip]] [member [,...]]

     To display the basic built-in help, use the command:

       UNZIP /HELP

     To display the extended built-in help, use the command:

       UNZIP /HELP=EXTENDED

     The built-in  help  may  be  more  current  than  this  help  file,
     especially between full product releases.

     The VMS CLI edition of the program can also provide  built-in  help
     on  the Unix-style command-line edition; just use the "-h" or "-hh"
     options.


UNZIP

  Command_Parameters

     file[.zip]

          File path/name of a ZIP archive.  A wildcard name may be used to
          specify  multiple  ZIP  archives to be processed in one command.
          On  VMS  systems,  any  of  the   standard   wildcards   for   a
          directory/file  specification  may  be used:  "...", "*", or "%"
          (or,  since  VMS  V7.2,  "?").    The   default   archive   file
          specification is ".ZIP".

          Note that a ".zip" or ".ZIP" file type on an archive is merely a
          convention,  not  a requirement.  For example, a self-extracting
          ZIP archive named "fred" or "fred.exe" could be processed as  if
          it  were  an ordinary archive; just specify the actual file name
          with its actual name ending (if any), whatever that may be.

     member [,...]

          An optional list of archive members to be  processed,  separated
          by  commas.   If  no  member list is specified, then all archive
          members are processed.  Unix-like ("globbing") wildcard patterns
          may be used to match multiple members:

              *       Matches a sequence of 0 or more characters.
              ?       Matches exactly 1 character.
              [...]   Matches any single character found inside the brackets.
                      Ranges are specified by a beginning character, a hyphen,
                      and an ending character.  If an exclamation point ("!")
                      or a caret ("^") follows the left bracket, then the
                      range of characters within the brackets is complemented.
                      That is, anything except the characters inside the
                      brackets is considered a match.  To specify a literal
                      left bracket, use the three-character sequence "[[]".


UNZIP

  Qualifiers_Primary_mode

       Qualifiers in this group specify the primary mode of  operation  of
       UnZip.  Only one of these primary mode qualifiers may be specified.


UNZIP

  Qualifiers_Primary_mode

    /COMMENT (-z)

         Primary mode.  Display only the archive comment.


UNZIP

  Qualifiers_Primary_mode

    /FRESHEN (-f)

         Primary Mode.  Freshen existing files.  That is, extract only those
         files  that  already exist on disk and that are newer than the disk
         copies.  By default  UnZip  queries  before  overwriting,  but  the
         /EXISTING (-o) option may be used to suppress the queries.


UNZIP

  Qualifiers_Primary_mode

    /HELP (-h, -hh)

         /HELP [=NORMAL]
         /HELP=EXTENDED

         Primary Mode.  Display brief (roughly 24 lines) usage  instructions
         (NORMAL,  the  default),  or  EXTENDED  help  (more  complete usage
         instructions).


UNZIP

  Qualifiers_Primary_mode

    /LICENSE (--license)

         Primary Mode.  Display the Info-ZIP license.


UNZIP

  Qualifiers_Primary_mode

    /LIST (-l)

         Primary Mode.  List archive members.  By default, a brief format is
         used,   which   includes   the   following   items:   member  name,
         uncompressed file size ("Length"), and  modification  date-time  of
         the  member.   A  summary  is  included  at  the end of the report,
         showing total size and count for all the  members  in  the  report.
         Specifying a member list limits the report to those members.

         Adding /VERBOSE to an "UNZIP /LIST" command line adds the following
         items to the report:  compression method, compressed size ("Size"),
         compression ratio, and 32-bit CRC.

         In contrast to some other programs,  UnZip  does  not  include  the
         12-byte  encryption  header  in  the  compressed  size values for a
         Traditionally encrypted member.   Therefore,  compressed  size  and
         compression   ratio   figures   are  independent  of  the  member's
         encryption status and show  the  correct  compression  performance.
         (The  complete  size  of  the  encrypted compressed data stream for
         archive members is reported by the more  verbose  ZipInfo  reports.
         See ZipInfo.

         If UnZip was built with OS2_EAS enabled, then the /LIST report also
         includes  the  sizes  of  stored OS/2 extended attributes (EAs) and
         OS/2 access control lists (ACLs).  In addition, the archive comment
         and individual member comments (if any) are displayed.

         If a file was archived from a single-case file system (for example,
         the  old MS-DOS FAT file system) and the /NAMES=DOWNCASE option was
         given, the filename is converted to lowercase and is shown prefixed
         with a caret (^).

         Note:  If only /VERBOSE is specified with  an  archive  name,  then
         UnZip  acts  as  if "/LIST /VERBOSE" were specified, and a detailed
         listing is generated.


UNZIP

  Qualifiers_Primary_mode

    /PIPE (-p)

         Primary Mode.  Extract files to stdout  (pipe).   Only  the  actual
         file  data  for  the  members are sent to stdout (no file names, or
         other information, as would be displayed with /SCREEN (-c), and the
         files  are  always  extracted  in  binary  format, just as they are
         stored (no conversions).  See also /SCREEN.


UNZIP

  Qualifiers_Primary_mode

    /SCREEN (-c)

         Primary Mode.  Extract files  to  stdout/screen.   This  option  is
         similar  to the /PIPE (-p) option except that the name of each file
         is displayed as it is extracted,  and  the  /TEXT  (-a)  option  is
         allowed, which can provide automatic ASCII-EBCDIC conversion, where
         appropriate.  See also /PIPE.


UNZIP

  Qualifiers_Primary_mode

    /TEST (-t)

         Primary Mode.  Test  archive  members.   Testing  means  that  each
         archive member is extracted in memory (expanding and decrypting, as
         needed), but not written to a  file.   The  resulting  CRC  (cyclic
         redundancy  check,  an  enhanced checksum) of the extracted data is
         then compared with the original file's stored  CRC  value,  and  an
         error message is emitted if a CRC mismatch is detected.

         Adding /VERBOSE (-v) to /TEST adds some diagnostic  information  to
         the report for archive members with LZMA or PPMd compression.


UNZIP

  Qualifiers_Primary_mode

    /TIMESTAMP (-T)

         Primary Mode.  Set the timestamp on the archive(s) to that  of  the
         newest file in each one.  This corresponds to Zip's /APPEND /LATEST
         (-go) option, except that it can be used on wildcard archives  (for
         example, "unzip -T *.zip"), and is much faster.


UNZIP

  Qualifiers_Primary_mode

    /UPDATE (-u)

         Primary mode.  Update existing files and create new ones if needed.
         This  mode performs the same function as the Freshen (/FRESHEN, -f)
         mode, extracting (with query) files that are newer than those  with
         the same name on disk, but it also extracts those files that do not
         already exist on disk.


UNZIP

  Qualifiers_Primary_mode

    /VERBOSE (-v)


         Primary mode (when alone) or option.  When used as a  primary  mode
         (alone),  and  no archive is specified, an "UNZIP /VERBOSE" command
         generates a report showing the program version, build options,  and
         relevant envrironment variables.

         When used with some other primary mode option,  /VERBOSE  can  make
         output more verbose (detailed).

         If no other primary mode is specified, and an archive is specified,
         then  UnZip  acts  as  if  "/LIST  /VERBOSE"  were specified, and a
         detailed  listing  is  generated.    See   Qualifiers_Primary_mode,
         particularly /LIST.


UNZIP

  Qualifiers_Ordinary

       Qualifiers in this group modify the operation of UnZip.


UNZIP

  Qualifiers_Ordinary

    /BINARY (-b, -bb)

         /BINARY[=keyword]
         /NOBINARY   (Default.)

         Selects the file record format used when extracting binary files.

         The optional keywords are:

             ALL      Extract all files with fixed-length, 512-byte record
                      format.  (-bb)
             AUTO     Extract binary files with fixed-length, 512-byte
                      record format.  (Default value keyword: "/BINARY" is
                      equivalent to "/BINARY=AUTO".)  (-b)
             NONE     Same as /NOBINARY.  Extract binary files with
                      Stream_LF record format.  (Default condition.)

         Zip (or a similar archiving program) identifies files  as  "binary"
         or  "text"  when they are archived.  (A short-format ZipInfo report
         denotes a binary file with a "b", and a text file with a "t".)

         [VMS] On VMS, for archives with  VMS  attribute  information  (made
         with  "zip  -V",  "ZIP  /VMS"), files are always created with their
         original  record  formats.   For  archives  without  VMS  attribute
         information  (not  made  with  "zip  -V",  "ZIP  /VMS"),  files are
         normally   created   with   Stream_LF    record    format.     With
         /BINARY[=AUTO],   binary   files  are  created  with  fixed-length,
         512-byte record format.  With /BINARY=ALL, all  files  are  created
         with  fixed-length,  512-byte  record  format.   When extracting to
         standard  output  (/PIPE  or  /SCREEN  in  effect),   the   default
         conversion  of  text record delimiters is disabled for binary files
         (with /BINARY[=AUTO]), or for all files (with /BINARY=ALL).

         /BINARY may conflict or interact  with  /TEXT.   A  combination  of
         /BINARY[=AUTO] and /TEXT[=AUTO] is allowed.  (See /TEXT.)


UNZIP

  Qualifiers_Ordinary

    /BRIEF

         Deprecated.  Ignored.  A no-op place-holder, originally intended as
         an     opposite     of     /FULL     (also     deprecated).     See
         Qualifiers_Primary_mode, particularly /LIST and /VERBOSE.


UNZIP

  Qualifiers_Ordinary

    /CASE_INSENSITIVE (-C)

         /CASE_INSENSITIVE
         /NOCASE_INSENSITIVE (default)

         Deprecated.  Use /MATCH=CASE.

         With /CASE_INSENSITIVE, match member names case-blindly.


UNZIP

  Qualifiers_Ordinary

    /DIRECTORY (-d)

         /DIRECTORY=dest_dir

         Specifies a destination directory for extracted files.  By default,
         files  are  extracted  (and  subdirectories created) in the current
         directory.  With "/DIRECTORY=dest_dir", extraction is done into the
         specified directory, instead.

         [VMS] On VMS, only a VMS-style device:[directory] specification  is
         permitted.


UNZIP

  Qualifiers_Ordinary

    /DOT_VERSION (-Y)

         [VMS] Treat archive member name endings of ".nnn" (where "nnn" is a
         decimal number) as if they were VMS version numbers (";nnn").  (The
         default is to treat them as file types.) For example:

             "a.b.3" -> "a.b;3"


UNZIP

  Qualifiers_Ordinary

    /EXCLUDE (-x)

         /EXCLUDE=(member [,...])

         An optional list of archive members to be excluded from processing.
         Because wildcard characters normally match "/" directory separators
         (for exceptions see /MATCH=[NO]WILD_MATCH_SLASH (-W)), this  option
         may  be  used to exclude any files that are in subdirectories.  For
         example,
             UNZIP foo *.[ch] /EXCLUDE = */*
         would extract all C source files (*.c, *.h) in the main  directory,
         but none in any subdirectories.  Without the /EXCLUDE option, all C
         source files  in  all  directories  within  the  archive  would  be
         extracted.

         Note that archive members are specified using the Unix-style  names
         which are used in ZIP archives, not VMS-style names.


UNZIP

  Qualifiers_Ordinary

    /EXISTING (-n, -o)

         /EXISTING[=keyword]

         Specifies the action when extracting  files,  and  a  file  already
         exists.

         The optional keywords are:

             NEW_VERSION  Create a new version of an existing file.  (-o)
             OVERWRITE    Overwrite an existing file.  (-oo)
             NOEXTRACT    Do not extract.  Leave an existing file intact.  (-n)

         By default, UnZip queries the user before extracting any file  that
         already exists.

         [Non-VMS] On non-VMS systems, the user may choose to overwrite only
         the  current  file,  overwrite  all  files,  skip extraction of the
         current file, skip extraction of all existing files, or rename  the
         current file (choose a new name for the extracted file).

         [VMS] On VMS, the usual query choices are to create a  new  version
         of  an  existing file, to skip extraction, or to rename the current
         file.  In the case where an archive member name includes a  version
         number,  and /VERSION (-V, "retain VMS file version numbers") is in
         effect, then an additional query choice is offered:   to  overwrite
         the existing file.


UNZIP

  Qualifiers_Ordinary

    /FULL (-v)

         /FULL
         /FULL=DIAGNOSTICS

         Deprecated.    Adds   detail    to    a    /LIST    report.     See
         Qualifiers_Primary_mode,   particularly  /LIST  and  /VERBOSE,  and
         Qualifiers_Ordinary, particularly /VERBOSE.


UNZIP

  Qualifiers_Ordinary

    /JAR (--jar)

         Treat archive(s) as Java  JAR.   Over-simplification  in  Java  JAR
         archives can cause UnZip to transform UTF-8 file names according to
         inappropriate (MS-DOS) rules, yielding corrupt names  on  extracted
         files   (typically  those  with  ASCII  codes  128-255).   Archives
         containing  a  Java  "CAFE"  extra   field   should   be   detected
         automatically,  and  handled  correctly,  but  not all JAR archives
         include that extra field.  Specifying /JAR tells  UnZip  to  expect
         UTF-8  file  names,  regardless  of  whether the archive contains a
         "CAFE" extra field.


UNZIP

  Qualifiers_Ordinary

    /JUNK_DIRS (-j)

         /NOJUNK_DIRS   (Default.)
         /JUNK_DIRS[=depth]

         Junk  directories  on  extracted  files.   With   /JUNK_DIRS,   all
         directory  information  is stripped from an archive member name, so
         all files are extracted into the destination directory.  (See  also
         /DIRECTORY.)

         If a depth ("=depth", where  "depth"  is  a  positive  integer)  is
         specified,  then  that  number of directory levels will be stripped
         from an archive member name.  For example, an archive  member  like
         "a/b/c/d/ee.txt" would normally be extracted as "[.a.b.c.d]ee.txt".
         With  /JUNK_DIRS,  it  would  be  extracted  as   "ee.txt".    With
         /JUNK_DIRS=2,  the first two directory levels would be stripped, so
         it would be extracted as "[.c.d]ee.txt".


UNZIP

  Qualifiers_Ordinary

    /LOWERCASE (-L)

         /[NO]LOWERCASE

         Deprecated.  Use /NAMES=[NO]DOWNCASE.

         /LOWERCASE:  Convert to lowercase any filename  originating  on  an
         uppercase-only operating system or file system.

         /NOLOWERCASE:  Do not convert to lowercase any filename originating
         on an uppercase-only operating system or file system.

         See also /UPPERCASE, which is also deprecated.


UNZIP

  Qualifiers_Ordinary

    /MATCH (-C, -W)

         /MATCH=(keyword, ...)

         Specifies name-matching behavior for names in the member  list  and
         the /EXCLUDE excluded-member list on the command line.

         The optional keywords and values are:

             CASE=BLIND          Name matching is case-insensitive.  (-C)
             CASE=SENSITIVE      Name matching is case-sensitive.  (Default.)

         By  default,  case-sensitive  matching  is  done.    For   example,
         specifying   "makefile"   on  the  command  line  will  match  only
         "makefile" in the archive, not "Makefile" or "MAKEFILE".   On  many
         systems,   the   local   file   system   is   case-insensitive,  so
         case-insensitive  name  matching  would  be  more  natural.    With
         /MATCH=CASE=BLIND,  "makefile"  would match "makefile", "Makefile",
         or "MAKEFILE".

         /MATCH does not affect the search for the ZIP archive file(s),  nor
         the matching of archive members to existing files on the extraction
         path.  So, on a case-sensitive file system, UnZip will never try to
         overwrite a file "FOO" when extracting a member named "foo"!

         [WILD_STOP_AT_DIR] If the C macro WILD_STOP_AT_DIR  is  defined  at
         build time, then an additional keyword is allowed:

             NOWILD_MATCH_SLASH  Wildcards stop at directory slash.  (-W)
             WILD_MATCH_SLASH    Wildcards match directory slash.  (Default.)

         By default, the wildcard characters "?" (single-character wildcard)
         and  "*" (multi-character wildcard) match any character in a member
         path/name.     /MATCH=NOWILD_MATCH_SLASH    (-W)    modifies    the
         pattern-matching  behavior  for  archive  members  so that both "?"
         (single-character wildcard) and "*" (multi-character  wildcard)  do
         not   match   the   directory   separator   character   "/".   (The
         two-character sequence "**" acts as a multi-character wildcard that
         includes  the  directory  separator in its matched characters.) For
         example, with /MATCH=NOWILD_MATCH_SLASH:

             "*.c"   matches "foo.c" but not "mydir/foo.c"
             "**.c"  matches both "foo.c" and "mydir/foo.c"
             "*/*.c" matches "bar/foo.c" but not "baz/bar/foo.c"
             "??*/*" matches "ab/foo" and "abc/foo"
                     but not "a/foo" or "a/b/foo"

         This modified behavior is equivalent to the pattern matching  style
         used  by  the  shells of some of \fIUnZip\fP's supported target OSs
         (one example is Acorn RISC OS).  This option may not  be  available
         on  systems  where  the  Zip archive's internal directory separator
         character "/" is allowed as regular character in  native  operating
         system filenames.

         [non-VMS] (Currently, UnZip uses the same  pattern  matching  rules
         for  both  wildcard  archive  file  name specifications and archive
         member selection  patterns  on  most  system  types.   For  systems
         allowing "/" as regular filename character, the -W option would not
         work as expected on a wildcard file name specification.)


UNZIP

  Qualifiers_Ordinary

    /NAMES (-2, -L, -s)

         /NAMES
         /NAMES=(keyword, ...)

         Selects name transformations during extraction.  The keywords are:

             DOWNCASE      Convert filenames from all-uppercase operating
                           systems to lowercase.  (-L)
             DOWNCASE=ALL  Convert all filenames to lowercase.  (-LL)
             ODS2          Restrict names to ODS2 conventions, regardless
                           of the destination file system.  (Invalid
                           character -> "_".)  (-2)
             [NO]SPACES    SPACES: Permit space characters in (ODS5) names.
                           (Default condition.)
                           NOSPACES: Change spaces to underscores.  (-s)

         The default is to use ODS5-compatible file names (including spaces)
         when  the destination file system is ODS5, and to convert the names
         to ODS2-compatible names when the destination file system is ODS2.


UNZIP

  Qualifiers_Ordinary

    /OVERWRITE (-n, -o)

         /[NO]OVERWRITE

         Deprecated.  Use /EXISTING.

         /OVERWRITE is equivalent to /EXISTING=NEW_VERSION.
         /NOOVERWRITE is equivalent to /EXISTING=NOEXTRACT.


UNZIP

  Qualifiers_Ordinary

    /PAGE (-M)

         Pipe all output through an  internal  pager  similar  to  the  Unix
         more(1) command.  At the end of a screenful of output, UnZip pauses
         with a "--More--" prompt; the  next  screenful  may  be  viewed  by
         pressing  the  Enter  (Return)  key or the space bar.  UnZip can be
         terminated by pressing the  "Q"  key  and,  on  some  systems,  the
         Enter/Return    key.     Unlike   Unix   more(1),   there   is   no
         forward-searching  or  editing  capability.   Also,  UnZip  doesn't
         notice  if  long  lines wrap at the edge of the screen, effectively
         resulting in the printing of two or more lines and  the  likelihood
         that  some  text will scroll off the top of the screen before being
         viewed.  If the actual number of lines on the  screen  can  not  be
         determined, 24 lines will be assumed.


UNZIP

  Qualifiers_Ordinary

    /PASSWORD (-P)

         /PASSWORD=password

         Use "password" to decrypt encrypted archive members (if any).  THIS
         IS  INSECURE!   Many  multi-user operating systems provide ways for
         any user to see the current command line of any other  user.   Even
         on   stand-alone   systems,   there   is   always   the  threat  of
         over-the-shoulder peeking.  Storing the plaintext password as  part
         of  a  command line in an automated script can be even less secure,
         Whenever possible, use the non-echoing, interactive prompt to enter
         passwords.   Where  security  is  truly  important,  use  a  strong
         encryption method, such as AES,  instead  of  the  relatively  weak
         encryption  provided  by  Traditional  ZIP  encryption.  Or, use an
         external encryption program, such as GnuPG,  before  archiving  the
         file.   (Note  that Zip will probably not be able to do significant
         compression on a file which has already been encrypted.)


UNZIP

  Qualifiers_Ordinary

    /QUIET (-q, -qq)

         /QUIET[=SUPER]

         Perform operations quietly.  (/QUIET=SUPER:  even more quietly).

         By default, UnZip prints the names of the files it's extracting  or
         testing,  the  extraction  methods,  any member or archive comments
         that may be stored in the archive,  and  possibly  a  summary  when
         finished  with  each  archive.  The /QUIET[=SUPER] options suppress
         the printing of some or all of these messages.


UNZIP

  Qualifiers_Ordinary

    /RESTORE (-D, -X)

         /RESTORE[=(keyword, ...)]

         Selects restoration  options  for  some  meta-data.   The  optional
         keywords are:

             ACL           Restore file protection, owner, and ACL settings.
                           (-XX)
             PROTECTION    Restore file protection settings.  (Default.)
             NOPROTECTION  Do not restore file owner and ACL protection
                           settings.  (-X-)
             NODATE        Do not restore any timestamps.
             DATE=ALL      Restore timestamps for all extracted entries,
                           files and directories.
             DATE=FILES    Restore timestamps for extracted files.  (Default.)

         By  default,  on  VMS,  UnZip  restores  the   original   date-time
         attributes  for  files,  but not for directories.  This agrees with
         the behavior of VMS BACKUP (and UnZip versions  before  5.52  where
         the capability to restore directory timestamps was added).

         For compatibility  with  UnZip  versions  before  6.0  (5.53),  the
         following deprecated short forms are still accepted:

             Deprecated form:      Modern form:
             /RESTORE              /RESTORE=PROTECTION
             /NORESTORE            /RESTORE=NOPROTECTION


UNZIP

  Qualifiers_Ordinary

    /TEXT (-a, -aa, -S)


         /TEXT[=(keyword, ...)]
         /NOTEXT   (Default.)

         The optional keywords are:

             ALL      Extract all files with variable-length record format.
                      Adjust line endings to local standard, and convert
                      EBCDIC to  ASCII, as needed.  (-aa)
             AUTO     Extract text files with variable-length record format.
                      Adjust line endings to local standard, and convert
                      EBCDIC to ASCII, as needed.  (Default value keyword:
                      "/TEXT" is equivalent to "/TEXT=AUTO".)  (-a)
             NONE     Same as /NOTEXT.  Extract text files with Stream_LF
                      record format without conversions.  (Default
                      condition.)
             STMLF    Use Stream_LF record format for text files (instead of
                      variable-length record format) when ALL or AUTO is in
                      effect.  Adjust line endings to local standard, and
                      convert EBCDIC to ASCII, as needed.  (-S)

         Selects the file record format, character encoding, and line-ending
         type used when extracting text files.

         Zip (or a similar archiving program) identifies files  as  "binary"
         or  "text"  when they are archived.  (A short-format ZipInfo report
         denotes a binary file with a "b", and a  text  file  with  a  "t".)
         Zip's  identification  of  text  files may not be perfect, so UnZip
         prints "[binary]" or "[text]" as a visual check for  each  file  it
         extracts  with  /TEXT.   /TEXT=ALL forces all files to be extracted
         (and converted) as text, regardless of the supposed file type.

         [VMS] On VMS, for archives with  VMS  attribute  information  (made
         with  "zip  -V",  "ZIP  /VMS"), files are always created with their
         original  record  formats.   For  archives  without  VMS  attribute
         information  (not  made  with  "zip -V", "ZIP /VMS"), all files are
         normally created with Stream_LF record format.  With  /TEXT[=AUTO],
         text files are normally created with variable-length record format,
         but adding STMLF gives them Stream_LF record format.  Additionally,
         line  endings  (CR,  LF,  CR+LF,  ..)  are  adjusted  to  the local
         standard, and EBCDIC is converted to ASCII.   With  /TEXT=ALL,  all
         files are treated as text files, and processed as described above.

         See also /BINARY.


UNZIP

  Qualifiers_Ordinary

    /TRAVERSE_DIRS (-:)

         /[NO]TRAVERSE_DIRS   (Default: /NOTRAVERSE_DIRS.)

         Allows UnZip to extract archive members into locations  outside  of
         the    current    extraction   destination   directory   (and   its
         subdirectories).

         For security reasons, UnZip  normally  removes  "parent  directory"
         path  components  ("../") from the path names of archive members as
         they are extracted.  This safety feature  (new  for  version  5.50)
         prevents  UnZip  from  accidentally  writing  files  to directories
         outside the current  destination  directory  tree.   /TRAVERSE_DIRS
         sets  UnZip  back  to its previous, more liberal behavior, allowing
         exact extraction of archives that  use  "../"  path  components  to
         create  multiple  directory  trees  at  or  above  the level of the
         destination directory.

         Use this option with extreme caution.


UNZIP

  Qualifiers_Ordinary

    /UPPERCASE (-L)

         /[NO]UPPERCASE

         Deprecated.  Use /NAMES=[NO]DOWNCASE.

         /UPPERCASE:  Do not convert to lowercase any  filename  originating
         on an uppercase-only operating system or file system.

         /NOUPPERCASE:  Convert to lowercase any filename originating on  an
         uppercase-only operating system or file system.

         See also /LOWERCASE, which is also deprecated.


UNZIP

  Qualifiers_Ordinary

    /VERBOSE (-v)

         /VERBOSE[=(keyword, ...)]

         The optional keywords are:

             NORMAL   Make a report more detailed/verbose.  (Default value
                      keyword: "/VERBOSE" is equivalent to
                      "/VERBOSE=NORMAL".)  (-v)
             MORE     Enable special developer I/O diagnostics.  See below.
                      (-vv)
             COMMAND  Enable special developer CLI diagnostics.  See below.

         MORE and NORMAL may  not  be  specified  together.   (MORE  implies
         NORMAL.)

         When used with some primary mode options, /VERBOSE can make  output
         more    detailed/verbose.     See   also   Qualifiers_Primary_mode,
         particularly /LIST.

         If no other primary mode is specified, and an archive is specified,
         then  UnZip  acts  as  if  "/LIST  /VERBOSE"  were specified, and a
         detailed  listing  is  generated.    See   Qualifiers_Primary_mode,
         particularly /LIST and /VERBOSE.

         /VERBOSE=MORE ("-vv")  enables  some  VMS-specific  I/O  diagnostic
         messages,  and  is  intended for use in program development, not in
         normal use.

         /VERBOSE=COMMAND causes UnZip to  show  the  translated  Unix-style
         command-line  argument vector before processing it, and is intended
         for   use   in   program   development,   not   in   normal    use.
         /VERBOSE=COMMAND has no Unix-style equivalent.


UNZIP

  Qualifiers_Ordinary

    /VERSION (-V)

         [Non-CMS-MVS] Retain VMS file version numbers.  VMS  files  can  be
         stored  with  a version number, in the format "file.type;##", where
         "##" is a decimal number.  By default the ";##" version numbers are
         stripped,  but  this  option  allows them to be retained.  (On file
         systems that limit filenames to  particularly  short  lengths,  the
         version  numbers  may  be  truncated or stripped regardless of this
         option.)

         [Non-VMS] Note that currently, on a non-VMS system, a file  with  a
         name like "fred;123" will, by default, be extracted as "fred", even
         if the file did not originate on a VMS system (so that  ";123"  was
         probably  not  really  a  VMS  version  number).  Many people would
         consider this a bug, and the default behavior  on  non-VMS  systems
         may be changed in the future.


UNZIP

  Qualifiers_Ordinary

    /ZIPINFO (-Z)

         ZipInfo mode.  With /ZIPINFO, the program  runs  in  ZipInfo  mode,
         which  is  used  to  display  information  about an archive and its
         members.  Remaining options are interpreted as ZipInfo options.  If
         used,  /ZIPINFO  must  be  the first qualifier on the command line.
         See ZipInfo_mode.


UNZIP

  Environment_Options

       UnZip's default behavior may  be  modified  by  placing  Unix-style
       command-line  options  in  an  environment  variable.  (The VMS CLI
       translator acts only  on  the  command  line  itself,  not  on  the
       environment variables.) This can be done with any option, but it is
       probably most useful options  like  -a  (/TEXT,  auto-convert  text
       files),  -L  (/NAMES,  downcase  file  names  from systems with all
       uppercase file names), -C (/MATCH=CASE=BLIND, use  case-insensitive
       name   matching),   -q   (/QUIET,  quiet),  -o  (/EXISTING,  always
       overwrite), or -n (/EXISTING, never overwrite).

       For UnZip, the environment  variable  name  on  VMS  is  UNZIP_OPTS
       (non-VMS:   UNZIP).  The name on VMS is different to avoid conflict
       with a foreign-command DCL symbol, UNZIP.  For  compatibility  with
       Zip, if UNZIP_OPTS is not defined, then UnZip will use UNZIPOPT the
       same way.

       For ZipInfo ("UNZIP /ZIPINFO"), the environment  variable  name  on
       VMS  is  ZIPINFO_OPTS  (non-VMS:  ZIPINFO).  For compatibility with
       Zip,  if  ZIPINFO_OPTS  is  not  defined,  then  ZipInfo  will  use
       ZIPINFOOPT the same way.
       For example, to  make  UnZip  act  as  quietly  as  possible,  only
       reporting  errors,  one could use commands like the following (with
       quotation to preserve lower case in DCL):

           define UNZIP_OPTS "-q -q"       ! Logical name, or
           UNZIP_OPTS = "-q -q"            ! DCL symbol.  (Either works.)

       Environment options are treated the same as  any  other  Unix-style
       command-line  options,  except  that they are effectively the first
       options on the command line.  Generally,  the  VMS  CLI  translator
       will  override  an  environment option if an explicit corresponding
       VMS-style qualifier is specified.

       The examples show short (one-character) options,  but  long  ("--")
       options are also allowed.


UNZIP

  Encryption_Decryption

       Zip and UnZip have long  supported  a  relatively  weak  encryption
       method,  which we call Traditional ZIP encryption.  The source code
       for Traditional encryption is included  in  the  source  kits,  and
       support   for   Traditional   encryption  is  enabled  by  default.
       (Build-time C macro:  CRYPT_TRAD.)

       Beginning with UnZip  version  6.10  and  Zip  version  3.1,  these
       programs  also offer a stronger, Advanced Encryption Standard (AES)
       encryption  method,  which  we  call  AES  WinZip/Gladman  (AES_WG)
       encryption.   (The  encryption  code was supplied by Brian Gladman,
       and the archive format is intended to be compatible with that  used
       by  the WinZip program.  WinZip is a registered trademark of WinZip
       International LLC.)  The  source  code  for  AES_WG  encryption  is
       distributed  in  a  separate  kit (for export control reasons), and
       support for AES_WG encryption must be enabled explicitly  at  build
       time.  (Build-time C macro:  CRYPT_AES_WG.) See the INSTALL file in
       the source kit for details on how to enable AES_WG  encryption  (or
       how to disable Traditional encryption).

       For details on the WinZip AES scheme, see:
           http://www.winzip.com/aes_info.htm

       For information on the separate AES_WG source kit, see:
           ftp://ftp.info-zip.org/pub/infozip/crypt/
           ftp://ftp.info-zip.org/pub/infozip/crypt/README_AES_WG.txt

       Normally,  encryption  passwords   are   supplied   by   the   user
       interactively  when  requested by the program.  See /PASSWORD for a
       (less secure) method of specifying a password on the command line.

       With Traditional encryption, when decrypting, a  password  will  be
       checked  against header data, and used if it appears to be correct.
       The correct password will always check out against the header data,
       but  there  is a 1-in-256 chance that an incorrect password will as
       well.  (This is a security feature of the PKWARE archive format; it
       helps prevent brute-force attacks that might otherwise gain a large
       speed advantage by testing only the header.) In the  case  that  an
       incorrect  password  is given but it passes the header test anyway,
       either an incorrect CRC will be generated for the extracted data or
       else  UnZip will fail during the extraction because the "decrypted"
       bytes do not constitute a valid compressed data stream.

       If the first password fails the header check on  some  file,  UnZip
       will  prompt  for  another  password, and so on until all files are
       extracted.  If a password is not known, entering  a  null  password
       (that  is,  just a carriage return or "Enter") is taken as a signal
       to skip all further  prompting.   Only  unencrypted  files  in  the
       archive(s)   will  thereafter  be  extracted.   (The  situation  is
       actually a little more complicated.  Some old versions of  Zip  and
       ZipCloak  allowed  null  passwords,  so UnZip checks each encrypted
       file to see if the null password works.  This may result in  "false
       positives" and extraction errors, as noted above.)

       Archives encrypted with  8-bit-character  passwords  (for  example,
       passwords  with  accented  European characters) may not be portable
       across systems or to other archivers.  This problem stems from  the
       use  of  multiple  encoding  methods for such characters, including
       Latin-1 (ISO 8859-1) and OEM code page 850.  DOS PKZIP  2.04g  uses
       the  OEM  code  page;  Windows  PKZIP  2.50  uses  Latin-1  (and is
       therefore incompatible with DOS PKZIP; Info-ZIP uses the  OEM  code
       page  on  DOS,  OS/2 and Win3.x ports but ISO coding (Latin-1 etc.)
       everywhere  else;  and  Nico  Mak's  WinZip  6.x  does  not   allow
       8-bit-character passwords at all.  UnZip 5.3 (or newer) attempts to
       use the default character set first (e.g.,  Latin-1),  followed  by
       the  alternate  one  (e.g.,  OEM  code page) to test passwords.  On
       EBCDIC systems, if both of these  fail,  EBCDIC  encoding  will  be
       tested  as  a  last  resort.   (EBCDIC  is not tested on non-EBCDIC
       systems, because there are no known archivers  that  encrypt  using
       EBCDIC  encoding.)  ISO  character encodings other than Latin-1 are
       not supported.  The  new  addition  of  (partial)  Unicode  (UTF-8)
       support  in  UnZip  6.0  has not yet been adapted to the encryption
       password handling in UnZip.  On systems that use  UTF-8  as  native
       character  encoding,  UnZip simply tries decryption with the native
       UTF-8 encoded password; the built-in attempts to check the password
       in  translated encoding have not yet been adapted for UTF-8 support
       and will consequently fail.


UNZIP

  Examples

       To use UnZip to extract all members of the archive letters.zip into
       the  current  directory  and  subdirectories below it, creating any
       subdirectories as necessary:

           unzip letters

       To extract all members of letters.zip into  the  current  directory
       only:

           unzip /junk_dirs letters

       To test letters.zip, printing only  a  summary  message  indicating
       whether the archive is OK or not:

           unzip /test /quiet letters

       To test all ".zip" archives in the current directory, printing only
       the summaries:

           unzip /test /quiet *.zip

       (On a Unix system, the wildcard member name would typically need to
       be  quoted  to  keep a a Unix shell from expanding ("globbing") it.
       This is not necessary on VMS.  However, a name with a  slash  ("/")
       character,  such as "*/zip*.*", must be quoted.  Otherwise, DCL may
       interpret the slash as introducing a qualifier, causing  unexpected
       behavior or an "%CLI-W-IVQUAL, unrecognized qualifier" error.)

       The following command extracts to standard output  all  members  of
       letters.zip whose names end in ".tex", auto-converting to the local
       end-of-line convention, in Stream_LF record format, and piping  the
       output into TYPE /PAGE:

           pipe unzip /screen /text=(auto, stmlf) letters *.tex | \
            type /page sys$input

       To extract from source.zip all Fortran and  C  source  files  (*.f,
       *.c, *.h) and Makefile into the SYS$SCRATCH directory:

           unzip source.zip *.[fch] Makefile /directory = sys$scratch

       To extract all FORTRAN and C source files, regardless of case  (for
       example,  both *.c and *.C, and any makefile, Makefile, MAKEFILE or
       similar):

           unzip -C source.zip *.[fch] makefile /directory = sys$scratch

       The following command extracts only newer  versions  of  the  files
       already  in  the  current  directory, without querying.  (Note:  Be
       careful of  extracting  in  one  timezone  an  archive  created  in
       another.   ZIP  archives created by Zip versions before 2.1 contain
       no timezone  information,  and  a  "newer"  file  from  an  eastern
       timezone may, in fact, be older):

           unzip /freshen /existing=new_version sources

       To extract newer versions of  the  files  already  in  the  current
       directory and to create any files not already there (same caveat as
       previous example):

           unzip /update /existing=new_version sources

       To display a configuration report showing the program version,  the
       OS  and  compiler  used  to  build  it, a list of optional features
       enabled  at  build  time,  and  the  values  of  all  the  relevant
       environment variables:

           unzip /verbose


UNZIP

  Exit_Status

       UnZip's exit status approximates the exit codes defined by  PKWARE.
       On   VMS,  UnZip's  UNIX-style  exit  values  are  translated  into
       VMS-style status codes with facility code 1954 =  %x7A2,  and  with
       the inhibit-message (%x10000000) and facility-specific (%x00008000)
       bits set:

           %x17A28001                        normal exit
           %x17A28000 + 16*UnZip_error_code  warnings
           %x17A28002 + 16*UnZip_error_code  normal errors
           %x17A28004 + 16*UnZip_error_code  fatal errors

       Note that multiplying the UNIX-style UnZip error code by 16  places
       it  conveniently  in the hexadecimal representation of the VMS exit
       code, "__" in %x17A28__s, where "s"  is  the  severity  code.   For
       example,  a  missing  archive might cause UnZip error code 9, which
       would be transformed into the VMS exit status %X17A28092.

       The UnZip VMS exit codes include severity values which  approximate
       those defined by PKWARE, as shown in the following table:

          VMS        UnZip
        severity   err code   Error description
       ----------+----------+----------------------------------------------
        Success       0       Normal.  No errors or warnings detected.
        Warning       1       One or more warnings were encountered, but
                              processing completed successfully.  This
                              includes archives where one or more (but not
                              all) files were skipped because of an
                              unsupported compression or encryption method,
                              or a bad encryption password.
        Error         2       Error in the archive format.  Processing may
                              or may not have completed  successfully.
        Fatal         3       Severe error in the archive format.
                              Processing probably failed immediately.
        Fatal         4       Memory allocation failed in program
                              initialization.
        Fatal         5       Memory  allocation or terminal I/O failed in
                              password processing.
        Fatal         6       Memory allocation failed while decompressing
                              to disk.
        Fatal         7       Memory allocation failed while decompressing
                              in memory.
        Fatal         8       Memory allocation failed.  (Currently not
                              used.)
        Error         9       Specified archive files were not found.
        Error        10       Invalid command-line options or parameters.
        Error        11       No matching files were found.
        Fatal        50       Disk (file system) filled during extraction.
        Fatal        51       Unexpected end-of-file while reading the
                              archive.
        Error        80       User interrupt (Ctrl/C).
        Error        81       No files were processed, because of
                              unsupported compression or encryption
                              methods.
        Error        82       No files were processed, because of bad
                              encryption password(s).
        Fatal        83       Large-file archive could not be processed by
                              this small-file program.


UNZIP

  Bugs

       Multi-part archives are not yet supported,  except  in  conjunction
       with  Zip.   (All parts must be concatenated together in order, and
       then "zip -F" (for Zip 2.x) or "zip -FF"  (for  Zip  3.x)  must  be
       performed  on the concatenated archive in order to "fix" it.  Also,
       zip 3.0 and later can combine multi-part (split)  archives  into  a
       combined   single-file   archive   using   "zip  -s-  inarchive  -O
       outarchive".  See the zip manual page for more  information.)  This
       may be corrected in the next major release.

       Archives read from standard input are  not  yet  supported,  except
       with  UnZip  (and  then only the first member of the archive can be
       extracted).

       Archives  encrypted  with  8-bit-character   passwords   (such   as
       passwords  with  accented  European characters) may not be portable
       across    systems    and/or    other    archivers.     See     also
       Encryption_Decryption.

       UnZip's -M ("--more") option tries to take into  account  automatic
       wrapping  of  long lines.  However, the code may fail to detect the
       correct wrapping locations.  First,  TAB  characters  (and  similar
       control  sequences) are not taken into account, they are handled as
       ordinary printable characters.  Second,  depending  on  the  actual
       system  type,  UnZip  may  not  detect  the  true terminal/emulator
       geometry,  but  instead  may  rely  on  "commonly   used"   default
       dimensions.   The  correct  handling  of  tabs  would  require  the
       implementation of a query for the actual tab setup  on  the  output
       terminal/emulator.

       [Unix] Unix special files such as FIFO buffers (named pipes), block
       devices  and  character  devices  are not restored even if they are
       somehow represented in  the  archive,  nor  are  hard-linked  files
       relinked.   Basically,  the  only  file types restored by UnZip are
       regular files, directories, and symbolic (soft) links.

       [OS/2]  Extended  attributes  for  existing  directories  are  only
       updated  if  the  -o  ("--overwrite")  option  is given.  This is a
       limitation of the operating system; because directories only have a
       creation  time  associated with them, UnZip has no way to determine
       whether the stored attributes are newer  or  older  than  those  on
       disk.   In  practice this may mean a two-pass approach is required:
       first   unpack   the   archive   normally    (with    or    without
       freshening/updating   existing  files),  then  overwrite  just  the
       directory entries (for example, "unzip -o foo */").


UNZIP

  URL

       The Info-ZIP main Web page is:
           http://www.info-zip.org/

       FTP access is available, too:
           ftp://ftp.info-zip.org/pub/infozip/


UNZIP

  ZipInfo_mode

       When /ZIPINFO is specified,  the  program  runs  in  ZipInfo  mode.
       Remaining  options  are  interpreted  as ZipInfo options.  If used,
       /ZIPINFO must be the first qualifier on the command line.

       ZipInfo reports detailed information about a ZIP  archive  and  its
       members.   This  information  may  include file access permissions,
       compression method, encryption method, version and operating system
       (or  file  system) of the archive-creating program, and so on.  The
       default behavior (with no options) is to show a  single-line  entry
       for  each  member  in  the  archive,  with  a  header and a trailer
       providing summary information for the entire archive.   The  format
       is  a cross between Unix "ls -l" and "UNZIP /LIST /VERBOSE" output.
       See Detailed_Description.  ZipInfo is the same  program  as  UnZip.
       (On Unix, "zipinfo" may be a link to "unzip".  On VMS, "ZIPINFO" is
       normally a DCL symbol defined  as  "''UNZIP'  /ZIPINFO".)  However,
       ZipInfo support may have been disabled when UnZip was built.

       Format:

         ZIPINFO [/zipinfo_options] [file[.zip]] [member [,...]]

         UNZIP /ZIPINFO [/zipinfo_options] [file[.zip]] [member [,...]]


UNZIP

  ZipInfo_mode

    Command_Parameters

       file[.zip]

            File path/name of a ZIP archive.  A wildcard name may be used to
            specify  multiple  ZIP  archives to be processed in one command.
            On  VMS  systems,  any  of  the   standard   wildcards   for   a
            directory/file  specification  may  be used:  "...", "*", or "%"
            (or,  since  VMS  V7.2,  "?").    The   default   archive   file
            specification is ".ZIP".

            Note that a ".zip" or ".ZIP" file type on an archive is merely a
            convention,  not  a requirement.  For example, a self-extracting
            ZIP archive named "fred" or "fred.exe" could be processed as  if
            it  were  an ordinary archive; just specify the actual file name
            with its actual name ending (if any), whatever that may be.

       member [,...]

            An optional list of archive members to be  processed,  separated
            by  commas.   If  no  member list is specified, then all archive
            members are processed.  Unix-like ("globbing") wildcard patterns
            may be used to match multiple members:

                *       Matches a sequence of 0 or more characters.
                ?       Matches exactly 1 character.
                [...]   Matches any single character found inside the
                        brackets.  Ranges are specified by a beginning
                        character, a hyphen, and an ending character.  If an
                        exclamation point ("!") or a caret ("^") follows the
                        left bracket, then the range of characters within
                        the brackets is complemented.  That is, anything
                        except the characters inside the brackets is
                        considered a match.  To specify a literal left
                        bracket, use the three-character sequence "[[]".


UNZIP

  ZipInfo_mode

    Qualifiers_Primary_Format

         Qualifiers in this group  specify  the  primary  report  format  of
         ZipInfo.   Only  one  of  these  primary  format  qualifiers may be
         specified.


UNZIP

  ZipInfo_mode

    Qualifiers_Primary_Format

      /LONG (-l)

           Primary Format.  Show member info in  long  Unix  "ls  -l"  format.
           Like the /MEDIUM format, except that the compressed size (in bytes)
           is printed instead of the compression ratio.


UNZIP

  ZipInfo_mode

    Qualifiers_Primary_Format

      /ONE_LINE (-2)

           Primary Format.  Show member  names  only,  one  per  line.   Other
           report elements are allowed, if requested explicitly using /HEADER,
           /TOTALS, and/or /COMMENT.


UNZIP

  ZipInfo_mode

    Qualifiers_Primary_Format

      /MEDIUM (-m)

           Primary Format.  Show member info in  medium-length  Unix  "ls  -l"
           format.   Like  the  /SHORT  format,  except  that  the compression
           factor, expressed as a percentage, is also included.


UNZIP

  ZipInfo_mode

    Qualifiers_Primary_Format

      /SHORT (-s)

           Primary Format.  Show member info in short  Unix  "ls  -l"  format.
           This  is  the  default  behavior,  unless  /HEADER  or  /TOTALS  is
           specified.


UNZIP

  ZipInfo_mode

    Qualifiers_Primary_Format

      /VERBOSE (-v)

           Primary Format.  The ZipInfo /VERBOSE report is very detailed,  and
           mostly  self-explanatory,  but it does assume some familiarity with
           the ZIP archive format.  It also includes the archive  comment,  if
           any.   Extra  fields  in the central directory are broken down into
           subfields, with brief interpretations of recognized  subfields  (or
           abbreviated dumps of unrecognized subfields).


UNZIP

  ZipInfo_mode

    Qualifiers_Ordinary

         Qualifiers in this group modify the operation or report  format  of
         ZipInfo.


UNZIP

  ZipInfo_mode

    Qualifiers_Ordinary

      /COMMENT (-z)

           Include the archive comments (if any) in the report.


UNZIP

  ZipInfo_mode

    Qualifiers_Ordinary

      /DECIMAL_TIME (-T)

           Show   the   file   date-times   in   a   sortable,    all-numeric,
           "YYYYMMDD.hhmmss"   format.    The   default   date  format  is  an
           alpha-numeric "YY-Mmm-DD hh:mm".  For  example  ("/SHORT",  "/SHORT
           /DECIMAL_TIME"):

           -rw-a--     3.1 fat   211916 tx defX 10-Jun-18 00:27 zip31c/zip.c
           -rw-a--     3.1 fat   211916 tx defX 20100618.002703 zip31c/zip.c


UNZIP

  ZipInfo_mode

    Qualifiers_Ordinary

      /EXCLUDE (-x)

           /EXCLUDE=(member [,...])
           An optional list of archive members to be excluded from processing.
           Because wildcard characters normally match "/" directory separators
           (for exceptions see /WILD_SPAN (-W)), this option may  be  used  to
           exclude any files that are in subdirectories.  For example,
               UNZIP foo *.[ch] /EXCLUDE = */*
           would extract all C source files (*.c, *.h) in the main  directory,
           but none in any subdirectories.  Without the /EXCLUDE option, all C
           source files  in  all  directories  within  the  archive  would  be
           extracted.

           Note that archive members are specified using the Unix-style  names
           which are used in ZIP archives, not VMS-style names.


UNZIP

  ZipInfo_mode

    Qualifiers_Ordinary

      /HEADER (-h)

           Include a header in the  report,  showing  the  archive  name,  the
           archive size (in bytes), and the number of members in the archive.

           For the Unix-format reports (options /LONG, /MEDIUM,  /SHORT),  the
           header is included by default, if no archive members are specified.
           If /HEADER  is  specified  alone,  that  is,  without  one  of  the
           Unix-format  options,  and  without  a  member  list, then only the
           header lines will be put out.


UNZIP

  ZipInfo_mode

    /MATCH (-C, -W)

         /MATCH=(keyword, ...)

         Specifies name-matching behavior for names in the member  list  and
         the /EXCLUDE excluded-member list on the command line.

         The optional keywords and values are:

             CASE=BLIND          Name matching is case-insensitive.  (-C)
             CASE=SENSITIVE      Name matching is case-sensitive.  (Default.)

         By  default,  case-sensitive  matching  is  done.    For   example,
         specifying   "makefile"   on  the  command  line  will  match  only
         "makefile" in the archive, not "Makefile" or "MAKEFILE".   On  many
         systems,   the   local   file   system   is   case-insensitive,  so
         case-insensitive  name  matching  would  be  more  natural.    With
         /MATCH=CASE=BLIND,  "makefile"  would match "makefile", "Makefile",
         or "MAKEFILE".

         /MATCH does not affect the search for the ZIP archive file(s),  nor
         the matching of archive members to existing files on the extraction
         path.  So, on a case-sensitive file system, UnZip will never try to
         overwrite a file "FOO" when extracting a member named "foo"!

         [WILD_STOP_AT_DIR] If the C macro WILD_STOP_AT_DIR  is  defined  at
         build time, then an additional keyword is allowed:

             NOWILD_MATCH_SLASH  Wildcards stop at directory slash.  (-W)
             WILD_MATCH_SLASH    Wildcards match directory slash.  (Default.)

         By default, the wildcard characters "?" (single-character wildcard)
         and  "*" (multi-character wildcard) match any character in a member
         path/name.     /MATCH=NOWILD_MATCH_SLASH    (-W)    modifies    the
         pattern-matching  behavior  for  archive  members  so that both "?"
         (single-character wildcard) and "*" (multi-character  wildcard)  do
         not   match   the   directory   separator   character   "/".   (The
         two-character sequence "**" acts as a multi-character wildcard that
         includes  the  directory  separator in its matched characters.) For
         example, with /MATCH=NOWILD_MATCH_SLASH:
             "*.c"   matches "foo.c" but not "mydir/foo.c"
             "**.c"  matches both "foo.c" and "mydir/foo.c"
             "*/*.c" matches "bar/foo.c" but not "baz/bar/foo.c"
             "??*/*" matches "ab/foo" and "abc/foo"
                     but not "a/foo" or "a/b/foo"

         This modified behavior is equivalent to the pattern matching  style
         used  by  the  shells of some of \fIUnZip\fP's supported target OSs
         (one example is Acorn RISC OS).  This option may not  be  available
         on  systems  where  the  Zip archive's internal directory separator
         character "/" is allowed as regular character in  native  operating
         system filenames.

         [non-VMS] (Currently, UnZip uses the same  pattern  matching  rules
         for  both  wildcard  archive  file  name specifications and archive
         member selection  patterns  on  most  system  types.   For  systems
         allowing "/" as regular filename character, the -W option would not
         work as expected on a wildcard file name specification.)


UNZIP

  ZipInfo_mode

    /MATCH (-C, -W)

      /MEMBER_COUNTS (default) (-mc)

           /NOMEMBER_COUNTS
           Control inclusion of separate member counts for directories, files,
           and  (if symlinks are supported) links, after the totals summary at
           the end of  the  report.   By  default,  they  are  included.   Use
           /NOMEMBER_COUNTS" to suppress them.  See also /TOTALS.


UNZIP

  ZipInfo_mode

    /MATCH (-C, -W)

      /PAGE (-M)

           Pipe all output through an  internal  pager  similar  to  the  Unix
           more(1) command.  At the end of a screenful of output, UnZip pauses
           with a "--More--" prompt; the  next  screenful  may  be  viewed  by
           pressing  the  Enter  (Return)  key or the space bar.  UnZip can be
           terminated by pressing the  "Q"  key  and,  on  some  systems,  the
           Enter/Return    key.     Unlike   Unix   more(1),   there   is   no
           forward-searching  or  editing  capability.   Also,  UnZip  doesn't
           notice  if  long  lines wrap at the edge of the screen, effectively
           resulting in the printing of two or more lines and  the  likelihood
           that  some  text will scroll off the top of the screen before being
           viewed.  If the actual number of lines on the  screen  can  not  be
           determined, 24 lines will be assumed.


UNZIP

  ZipInfo_mode

    /MATCH (-C, -W)

      /TOTALS (-t)

           Include a totals summary at the end  of  the  report,  showing  the
           number  of  members  in  the  report, the sum of their uncompressed
           sizes, the sum of  their  compressed  sizes,  and  the  compression
           factor as a percentage.

           For the Unix-format reports (/LONG, /MEDIUM,  /SHORT),  the  totals
           summary   is  included  by  default,  if  no  archive  members  are
           specified.  If /TOTALS is specified alone, that is, without one  of
           the  Unix-format  options, and without a member list, then only the
           totals summary trailer lines will be put out.

           The total "bytes compressed"  reported  includes  only  the  actual
           data,  not  the  ZIP  archive meta-data, so the size of the archive
           will always be greater than this value.

           See also /MEMBER_COUNTS.


UNZIP

  ZipInfo_mode

    Detailed_Description

         ZipInfo has three basic report formats, providing different degrees
         of  detail  in  the information about the members of an archive:  a
         simple list of names (/ONE_LINE (-1, -2)), a Unix ls-style  listing
         (/LONG  (-l),  /MEDIUM  (-m),  /SHORT  (-s)),  and  a very detailed
         analysis (/VERBOSE (-v)).  Some of the information,  such  as  file
         sizes,  is  easy  to  interpret.   Some of the information involves
         fairly obscure details  of  ZIP  archive  structure.   ZIP  archive
         structure is documented in the PKWARE Inc.  APPNOTE.TXT:
             http://www.pkware.com/documents/casestudies/APPNOTE.TXT

         The table below shows some typical /LONG report entries:

         Perm/Prot  Zver Ofs UncSize At CmpSize Cmth  ModDate  Mtime Name
         ----------+----+---+-------+--+-------+----+---------------+----------
         -rw-a--     3.1 fat  211916 tx   53467 defX 10-Jun-18 00:27 zip3/zip.c
         -rwxr-x---  3.1 unx     709 Tx     311 aesw 11-Aug-21 22:20 endian.c
         RWED,RE,    3.1 vms    6656 bx    2295 defN 07-Aug-15 14:12 it/T.EXE;8

         Field  1   (Perm/Prot)   shows   the   file   permission/protection
         attributes, formatted according to the original operating system or
         file system where the archive was created.

         Field 2 (Zver) shows the (approximate) version of the  Zip  program
         which created the archive.

         Field 3 (Ofs) shows the original operating system where the archive
         was  created,  or  the  file  system  on  which the member file was
         stored.

         Field 4 (UncSize) shows the original, uncompressed file size.

         Field 5 (At) shows some archive member attributes, as  detailed  in
         the tables below.  The first character indicates whether a file was
         binary or text, and whether it was encrypted.  The second character
         indicates  the  presence of a data descriptor and/or an extra field
         in the member data.

                       |   File Type     Extra Field |
           First char  | binary  text      yes   no  |  Second char
         --------------+-------+-----    ------+-----+--------------------
         Encrypted  no |   b      t         x     -  | no  Data Descriptor
                   yes |   B      T         X     l  | yes

         A Data Descriptor holds CRC and size data at an alternate place  in
         the archive (after processed member data instead of before), and is
         normally used when the archiving program can't seek in  the  output
         archive data/file.  An Extra Field can hold a wide variety of data,
         including 64-bit file sizes, many kinds  of  OS-specific  attribute
         data, UTC times, and so on.

         Field 6 (CmpSize) shows the compressed file  size.   With  /MEDIUM,
         this  field  shows  the compression fraction as a percentage.  With
         /SHORT (the default), this field is omitted.  This compressed  size
         value  (unlike the one in an "UNZIP /LIST" report) includes all the
         overhead resulting from Traditional encryption.

         Field 7 (Cmth) shows the compression method used.  Note that AES_WG
         encryption is treated as a compression method here.  Not all of the
         methods  shown  in  the  table  below  are  supported.   (Some  are
         obsolete.)

          Num Abbr  Name, description
         ----+----+------------------------------------------------------------
           0  stor  Store (no compression)
           1  shrk  Shrink
           2  re:1  Reduce (factor 1)
           3  re:2  Reduce (factor 2)
           4  re:3  Reduce (factor 3)
           5  re:4  Reduce (factor 4)
           6  i#:#  Implode (dictonary_size:Shannon-Fano_trees)
           7  tokn  Tokenize
           8  def#  Deflate (N: normal, X: maximum, F: fast, S: super-fast)
           9  d64#  Deflate64 (N: normal, X: maximum, F: fast, S: super-fast)
          10  dcli  PKWARE Data Compression Library Imploding - IBM TERSE (old)
          12  bzp2  bzip2
          14  lzma  LZMA
          18  ters  IBM TERSE (new)
          19  lz77  IBM LZ77 z Architecture (PFS)
          96  jpeg  JPEG
          97  wavp  WavPack
          98  ppmd  PPMd version I, Rev 1
          99  aesw  AES_WG encryption

         Fields  8  and  9  (ModDate,  Mtime)  show  the  file  modification
         date-time (MS-DOS format, local time).

         Field 10 (Name) shows the file path/name.


UNZIP

  ZipInfo_mode

    Environment_Options

         ZipInfo's default behavior may be modified  by  placing  Unix-style
         command-line  options  in  an  environment  variable.  (The VMS CLI
         translator acts only  on  the  command  line  itself,  not  on  the
         environment variables.) This can be done with any option, but it is
         probably most useful options like -T (/DECIMAL_TIME,  decimal  time
         format) or one of the non-default Unix format options:  -l (/LONG),
         -m (/MEDIUM).

         For ZipInfo ("UNZIP /ZIPINFO", ZIPINFO), the  environment  variable
         name on VMS is ZIPINFO_OPTS (non-VMS:  ZIPINFO).  For compatibility
         with Zip, if ZIPINFO (ZIPINFO_OPTS on VMS)  is  not  defined,  then
         ZipInfo will use ZIPINFOOPT the same way.

         For example, to make  the  default  format  the  long  Unix  format
         instead  of  the short Unix format, one could use commands like the
         following (with quotation to preserve lower case in DCL):

             define ZIPINFO_OPTS "-l"        ! Logical name, or
             ZIPINFO_OPTS = "-l"             ! DCL symbol.  (Either works.)

         Environment options are treated the same as  any  other  Unix-style
         command-line  options,  except  that they are effectively the first
         options on the command line.  Generally,  the  VMS  CLI  translator
         will  override  an  environment option if an explicit corresponding
         VMS-style qualifier is specified.

         The examples show short (one-character) options,  but  long  ("--")
         options are also allowed.


UNZIP

  ZipInfo_mode

    Examples

         To get a basic, short-format listing of the complete contents of  a
         ZIP archive zip31c.zip, with both header and totals lines, use only
         the archive name as an argument to zipinfo:

             zipinfo zip31c.zip
             zipinfo zip31c

         To produce a basic, long-format listing  (not  verbose),  including
         header and totals lines, use /LONG:

             zipinfo /long zip31c.zip

         To list the complete contents of the  archive  without  header  and
         totals  lines,  either negate the /HEADER and /TOTALS qualifiers or
         else specify the contents explicitly:

             zipinfo /noheader /nototals zip31c.zip
             zipinfo zip31c.zip *

         (On a Unix system, the wildcard member name would typically need to
         be  quoted  to  keep a a Unix shell from expanding ("globbing") it.
         This is not necessary on VMS.  However, a name with a  slash  ("/")
         character,  such as "*/zip*.*", must be quoted.  Otherwise, DCL may
         interpret the slash as introducing a qualifier, causing  unexpected
         behavior or an "%CLI-W-IVQUAL, unrecognized qualifier" error.)

         To list information on a single archive member, in  medium  format,
         specify the member name explicitly:

             zipinfo /medium unzip60.zip */unshrink.c

         On a VMS system, one could use /DECIMAL_TIME along with an external
         sorting  program  to  get  a  listing  of  files  in the archive in
         date-time order:

             pipe zipinfo /decimal_time /long /noheader /nototals zip31c.zip | -
              sort sys$input sys$output /key = (position:47, size:15, descend)

         For a /LONG (-l) format report, the date-time field should begin at
         position  47; for /MEDIUM (-m), 42; for /SHORT (-s), 38.  HELP SORT
         [/KEY] should lead to an explanation of the various  SORT  options.
         (Unlike  Unix,  VMS  does  not  include  a  useful "head" or "tail"
         program.)

         On a Unix system, one  could  use  the  -T  option  along  with  an
         external sorting program (and another filter like "head" or "tail")
         to get a listing of the least or most recently  modified  files  in
         the archive:

             zipinfo -l -T -h- -t- zip31c.zip | sort -k 8 | head -12
             zipinfo -l -T -h- -t- zip31c.zip | sort -r -k 8 | head -12

         The "sort" option "-k 8" tells it to sort on field 8, which is  the
         date-time  field  in  a  long-  or  medium-format  (-l, -m) ZipInfo
         report.  (Use "-k 7" for the short  (-s)  format.)  The  -r  option
         reverses the default smallest-to-largest sort order.


UNZIP

  ZipInfo_mode

    Bugs

         As with UnZip, ZipInfo's /PAGE (-M) option is overly simplistic  in
         its  handling of screen output.  As noted above, it fails to detect
         the wrapping of long lines and may thereby cause lines at  the  top
         of the screen to be scrolled off before being read.  ZipInfo should
         detect and treat each occurrence of  line-wrap  as  one  additional
         line  printed.   This  requires  knowledge of the screen's width as
         well as its height.  In addition, ZipInfo should  detect  the  true
         screen geometry on all systems.

         The interactions among the  various  listing  format,  header,  and
         trailer  options  (/HEADER,  /LONG,  /MEDIUM,  /SHORT, /TOTALS) are
         unnecessarily  complex  and  should  be  simplified,  despite   the
         potential disruption to current users.


UNZIP

  ZipInfo_mode

    URL

         The Info-ZIP main Web page is:
             http://www.info-zip.org/

         FTP access is available, too:
             ftp://ftp.info-zip.org/pub/infozip/

